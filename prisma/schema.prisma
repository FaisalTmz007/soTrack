// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String      @id @default(uuid())
  email     String   @unique
  password  String
  otp_code  String? @unique
  otp_expired DateTime?
  reset_password String? @db.Text
  facebook_id String? @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  UserToken UserToken[]
  Filter    Filter[]
  SocialMedia      SocialMedia[]
  EmailBroadcast EmailBroadcast[]
  PublicReport PublicReport[]
}

model UserToken {
  id        String      @id @default(uuid())
  user_id   String
  token     String  @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  User      User     @relation(fields: [user_id], references: [id])
}

model Platform {
  id        String      @id @default(uuid())
  name      String   @unique
  logo_url  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


  Filter    Filter[]
  SocialMedia      SocialMedia[]
  News      News[]
}

model Category {
  id        String      @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Filter    Filter[]
  SocialMedia      SocialMedia[]
  News      News[]
}

model Filter {
  id        String      @id @default(uuid())
  parameter String
  is_active Boolean @default(true)
  user_id   String
  platform_id String
  category_id String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User      User     @relation(fields: [user_id], references: [id])
  Platform  Platform @relation(fields: [platform_id], references: [id])
  Category  Category @relation(fields: [category_id], references: [id])
}

model News {
  id        String      @id @default(uuid()) @unique
  title     String
  source    String
  url       String
  published_at DateTime
  crime_type String?
  platform_id String
  category_id String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Platform  Platform @relation(fields: [platform_id], references: [id])
  Category  Category @relation(fields: [category_id], references: [id])
}

model SocialMedia {
  id        String      @id @default(uuid())
  username  String?
  caption     String? @db.Text
  media_url       String?
  published_at DateTime?
  like_count    Int?
  comment_count Int?
  post_url  String? @db.Text
  crime_type String?
  platform_id String
  category_id String
  user_id   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Platform  Platform @relation(fields: [platform_id], references: [id])
  Category  Category @relation(fields: [category_id], references: [id])
  User      User     @relation(fields: [user_id], references: [id])
}

model EmailBroadcast {
  id        String      @id @default(uuid())
  receipient String
  message    String @db.Text
  date       DateTime
  city       String
  user_id    String
  attachments String?  @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User      User     @relation(fields: [user_id], references: [id])
}

model PublicReport {
  id        String      @id @default(uuid())
  name    String
  email    String
  phone    String
  province String
  city String
  message String @db.Text
  attachments String?  @db.Text
  is_handled Boolean @default(false)
  user_id   String
  category_id String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User      User     @relation(fields: [user_id], references: [id])
  PublicReportCategory  PublicReportCategory @relation(fields: [category_id], references: [id])
}

model PublicReportCategory {
  id        String      @id @default(uuid())
  name    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  PublicReport PublicReport[]
}